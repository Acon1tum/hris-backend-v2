generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  // Personnel Information
  employee_create
  employee_read
  employee_update
  employee_delete
  employment_record_create
  employment_record_read
  employment_record_update
  employment_record_delete
  membership_data_create
  membership_data_read
  membership_data_update
  membership_data_delete
  designation_create
  designation_read
  designation_update
  designation_delete
  employment_history_create
  employment_history_read
  employment_history_update
  employment_history_delete
  merit_create
  merit_read
  merit_update
  merit_delete
  violation_create
  violation_read
  violation_update
  violation_delete
  admin_case_create
  admin_case_read
  admin_case_update
  admin_case_delete
  custom_field_create
  custom_field_read
  custom_field_update
  custom_field_delete

  // Requests
  request_create
  request_read
  request_update
  request_delete
  leave_request_create
  leave_request_read
  leave_request_update
  leave_request_delete
  dtr_adjustment_create
  dtr_adjustment_read
  dtr_adjustment_update
  dtr_adjustment_delete
  certification_request_create
  certification_request_read
  certification_request_update
  certification_request_delete
  membership_form_create
  membership_form_read
  membership_form_update
  membership_form_delete
  leave_monetization_create
  leave_monetization_read
  leave_monetization_update
  leave_monetization_delete
  document_request_create
  document_request_read
  document_request_update
  document_request_delete
  approval_workflow_create
  approval_workflow_read
  approval_workflow_update
  approval_workflow_delete
  custom_request_create
  custom_request_read
  custom_request_update
  custom_request_delete

  // Timekeeping & Attendance
  attendance_log_create
  attendance_log_read
  attendance_log_update
  attendance_log_delete
  evidence_submission_create
  evidence_submission_read
  evidence_submission_update
  evidence_submission_delete
  schedule_create
  schedule_read
  schedule_update
  schedule_delete
  wfh_schedule_create
  wfh_schedule_read
  wfh_schedule_update
  wfh_schedule_delete
  custom_schedule_create
  custom_schedule_read
  custom_schedule_update
  custom_schedule_delete
  flextime_schedule_create
  flextime_schedule_read
  flextime_schedule_update
  flextime_schedule_delete
  break_policy_create
  break_policy_read
  break_policy_update
  break_policy_delete
  dtr_report_read
  dtr_report_generate

  // Payroll Management
  payroll_record_create
  payroll_record_read
  payroll_record_update
  payroll_record_delete
  salary_adjustment_create
  salary_adjustment_read
  salary_adjustment_update
  salary_adjustment_delete
  loan_balance_create
  loan_balance_read
  loan_balance_update
  loan_balance_delete
  employee_contribution_create
  employee_contribution_read
  employee_contribution_update
  employee_contribution_delete
  loan_deduction_create
  loan_deduction_read
  loan_deduction_update
  loan_deduction_delete
  mandatory_deduction_create
  mandatory_deduction_read
  mandatory_deduction_update
  mandatory_deduction_delete
  gross_salary_create
  gross_salary_read
  gross_salary_update
  gross_salary_delete

  // Leave Management
  leave_type_create
  leave_type_read
  leave_type_update
  leave_type_delete
  leave_requirement_create
  leave_requirement_read
  leave_requirement_update
  leave_requirement_delete
  leave_balance_create
  leave_balance_read
  leave_balance_update
  leave_balance_delete
  leave_credit_adjustment_create
  leave_credit_adjustment_read
  leave_credit_adjustment_update
  leave_credit_adjustment_delete
  leave_report_read
  leave_report_generate

  // Recruitment
  applicant_create
  applicant_read
  applicant_update
  applicant_delete
  job_posting_create
  job_posting_read
  job_posting_update
  job_posting_delete
  application_create
  application_read
  application_update
  application_delete
  recruitment_status_create
  recruitment_status_read
  recruitment_status_update
  recruitment_status_delete
  interview_schedule_create
  interview_schedule_read
  interview_schedule_update
  interview_schedule_delete
  assessment_create
  assessment_read
  assessment_update
  assessment_delete
  appointment_create
  appointment_read
  appointment_update
  appointment_delete

  // Online Job Application Portal
  job_application_create
  job_application_read
  job_application_update
  job_application_delete
  applicant_profile_create
  applicant_profile_read
  applicant_profile_update
  applicant_profile_delete
  application_status_read
  application_cancel_read

  // Performance Module
  performance_review_create
  performance_review_read
  performance_review_update
  performance_review_delete
  kpi_create
  kpi_read
  kpi_update
  kpi_delete
  self_assessment_create
  self_assessment_read
  self_assessment_update
  self_assessment_delete
  manager_assessment_create
  manager_assessment_read
  manager_assessment_update
  manager_assessment_delete
  feedback_360_create
  feedback_360_read
  feedback_360_update
  feedback_360_delete
  performance_report_read
  performance_report_generate

  // Report Generation
  report_read
  report_generate
  report_export_read
  report_template_read
  report_template_generate
  audit_trail_read

  // Learning & Development
  training_program_create
  training_program_read
  training_program_update
  training_program_delete
  training_material_create
  training_material_read
  training_material_update
  training_material_delete
  training_enrollment_create
  training_enrollment_read
  training_enrollment_update
  training_enrollment_delete
  training_assessment_create
  training_assessment_read
  training_assessment_update
  training_assessment_delete
  certificate_create
  certificate_read
  certificate_update
  certificate_delete
  skills_inventory_create
  skills_inventory_read
  skills_inventory_update
  skills_inventory_delete
  training_report_read
  training_report_generate

  // System Administration
  user_create
  user_read
  user_update
  user_delete
  role_create
  role_read
  role_update
  role_delete
  permission_create
  permission_read
  permission_update
  permission_delete
  parameter_create
  parameter_read
  parameter_update
  parameter_delete
  config_create
  config_read
  config_update
  config_delete
  audit_log_read
  delegation_read
  system_login_read
}

enum Status {
  Active
  Inactive
}

enum Gender {
  Male
  Female
  Other
}

enum CivilStatus {
  Single
  Married
  Divorced
  Widowed
}

enum EmploymentType {
  Regular
  Contractual
  Part_time
  Temporary
  Consultant
}

enum AttendanceStatus {
  Present
  Absent
  Late
  On_Leave
  Work_From_Home
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
}

enum MovementType {
  Promotion
  Transfer
  Re_employment
  Reinstatement
  Voluntary_Demotion
  Disciplinary_Demotion
  Reclassification
  Reassignment
  Detail
  Designation
  Probationary_Period
  Item_Number_Change
  Step_Increment
  Salary_Adjustment
  Reinstatement_Same_Position
}

enum RecordType {
  Merit
  Violation
}

enum CaseStatus {
  Filed
  Under_Investigation
  Resolved
  Dismissed
  Appealed
}

enum PaymentStatus {
  Pending
  Processed
  Disbursed
}

enum LoanType {
  Consolidated
  Policy
  Multi_Purpose
  Other
}

enum LoanStatus {
  Active
  Fully_Paid
  Delinquent
}

enum PostingStatus {
  Draft
  Published
  Closed
  Filled
}

enum ApplicationStatus {
  Pending
  Pre_Screening
  For_Interview
  For_Examination
  Shortlisted
  Selected
  Rejected
  Withdrawn
  Hired
}

enum InterviewType {
  Phone
  Video
  On_Site
}

enum InterviewStatus {
  Scheduled
  Completed
  Cancelled
}

enum ExamStatus {
  Scheduled
  Completed
  Cancelled
}

enum ExamResult {
  Passed
  Failed
  Pending
}

enum Recommendation {
  Hire
  Consider
  Reject
}

enum CertificateType {
  Employment
  Contribution
  Service_Record
  Other
}

enum RequestStatus {
  Pending
  Processing
  Completed
  Rejected
}

enum ReviewStatus {
  Draft
  Submitted
  Reviewed
  Acknowledged
}

enum TrainingStatus {
  Planned
  Ongoing
  Completed
  Cancelled
}

enum ParticipantStatus {
  Enrolled
  Completed
  Failed
  Dropped
}

enum FeedbackType {
  System
  HR_Service
  Management
  Work_Environment
  Other
}

enum FeedbackStatus {
  New
  Under_Review
  Addressed
  Closed
}

enum EvaluationStatus {
  Draft
  Submitted
  Reviewed
  Finalized
}

enum RequestType {
  Leave
  Payroll
  Recruitment
}

enum CourseStatus {
  Draft
  Published
  Archived
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  password_hash   String
  email           String   @unique
  profile_picture String?
  status          Status   @default(Active)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  personnel       Personnel[]
  user_roles      UserRole[]
  role_assignments UserRole[] @relation("UserRoleAssignedBy")
  permission_grants RolePermission[] @relation("RolePermissionGrantedBy")
  approvals       Approval[]
  audit_logs      AuditLog[]
  certificates    CertificateRequest[]
  documents       Document[]
  user_documents  UserDocument[]
  feedback        EmployeeFeedback[]
  interviews      InterviewSchedule[]
  examinations    ExaminationSchedule[]
  assessments     ApplicantAssessment[]
  notifications   Notification[]
  reports         Report[]
  performance_reviews PerformanceReview[]
  performance_evaluations PerformanceEvaluation[]
  personnel_schedules PersonnelSchedule[]
  approved_by_user DtrAdjustmentRequest[]
  leave_approved_by_user LeaveMonetization[]
  leave_application_approved_by_user LeaveApplication[] @relation("LeaveApplicationApprovedBy")
  overtime_approved_by_user OvertimeRequest[]
  issued_by_user PersonnelMovement[]
  documented_by_user MeritViolation[]
  filed_by_user AdministrativeCase[]
  processed_by_user PayrollRecord[]
  created_by_user JobPosting[]
  user JobApplicant[]
  training_created_by_user TrainingProgram[]
  leave_adjustments_created_by_user LeaveAdjustment[] @relation("LeaveAdjustmentCreatedBy")
}

model Role {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String?
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_roles      UserRole[]
  role_permissions RolePermission[]
}

model UserRole {
  id              String   @id @default(uuid())
  user_id         String
  role_id         String
  assigned_at     DateTime @default(now())
  assigned_by     String?
  is_active       Boolean  @default(true)
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role            Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  assigned_by_user User?   @relation("UserRoleAssignedBy", fields: [assigned_by], references: [id])
  @@unique([user_id, role_id])
}

model RolePermission {
  id              String   @id @default(uuid())
  role_id         String
  permission      Permission
  granted_at      DateTime @default(now())
  granted_by      String?
  role            Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  granted_by_user User?    @relation("RolePermissionGrantedBy", fields: [granted_by], references: [id])
  @@unique([role_id, permission])
}

model Department {
  id                  String   @id @default(uuid())
  department_name     String      @unique
  department_head     String?
  parent_department_id String?
  description         String?
  created_at          DateTime    @default(now())
  parent_department   Department? @relation("DepartmentToDepartment", fields: [parent_department_id], references: [id])
  departments         Department[] @relation("DepartmentToDepartment")
  personnel           Personnel[]
  job_postings        JobPosting[]
  previous_movements PersonnelMovement[] @relation("PreviousDepartment") 
  new_movements      PersonnelMovement[] @relation("NewDepartment") 
}

model Personnel {
  id              String   @id @default(uuid())
  user_id         String?  // Now optional
  first_name      String
  last_name       String
  middle_name     String?
  date_of_birth   DateTime?
  gender          Gender?
  civil_status    CivilStatus?
  contact_number  String?
  address         String?
  department_id   String?
  designation     String?
  employment_type EmploymentType
  date_hired      DateTime?
  salary          Float
  gsis_number     String?
  pagibig_number  String?
  philhealth_number String?
  sss_number      String?
  tin_number      String?
  created_at      DateTime    @default(now())
  user            User?       @relation(fields: [user_id], references: [id])
  department      Department? @relation(fields: [department_id], references: [id])
  employment_history  EmploymentHistory[]
  personnel_schedules PersonnelSchedule[]
  attendance_logs     AttendanceLog[]
  dtr_adjustment_requests DtrAdjustmentRequest[]
  leave_balances      LeaveBalance[]
  leave_applications  LeaveApplication[]
  leave_monetization  LeaveMonetization[]
  overtime_requests   OvertimeRequest[]
  personnel_movement  PersonnelMovement[]
  merits_violations   MeritViolation[]
  administrative_cases AdministrativeCase[]
  payroll_records     PayrollRecord[]
  loan_records        LoanRecord[]
  certificate_requests CertificateRequest[]
  performance_reviews PerformanceReview[]
  training_participants TrainingParticipant[]
  feedback            EmployeeFeedback[]
  deductions          Deduction[]
  personnel           PerformanceEvaluation[]
  employeeSelfServiceProfile EmployeeSelfServiceProfile?
  employeeDocuments         EmployeeDocument[]
  courses_instructed        Course[]
  course_enrollments        CourseEnrollment[]
  leave_adjustments         LeaveAdjustment[]
}

model EmploymentHistory {
  id                  String   @id @default(uuid())
  personnel_id        String
  organization        String
  position            String
  start_date          DateTime
  end_date            DateTime?
  employment_type     EmploymentType
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
}

model WorkSchedule {
  id                  String   @id @default(uuid())
  schedule_name       String
  is_flextime         Boolean     @default(false)
  start_time          DateTime?
  end_time            DateTime?
  break_start_time    DateTime?
  break_end_time      DateTime?
  break_deducted      Boolean     @default(true)
  is_work_from_home   Boolean     @default(false)
  created_at          DateTime    @default(now())
  personnel_schedules PersonnelSchedule[]
}

model PersonnelSchedule {
  id                  String   @id @default(uuid())
  personnel_id        String
  schedule_id         String
  start_date          DateTime
  end_date            DateTime?
  created_by          String
  created_at          DateTime    @default(now())
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  work_schedule       WorkSchedule @relation(fields: [schedule_id], references: [id])
  created_by_user     User        @relation(fields: [created_by], references: [id])
}

model AttendanceLog {
  id                  String   @id @default(uuid())
  personnel_id        String
  log_date            DateTime
  time_in             DateTime?
  time_out            DateTime?
  total_hours         Float?
  status              AttendanceStatus
  biometric_used      Boolean     @default(true)
  evidence_path       String?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
}

model DtrAdjustmentRequest {
  id                  String   @id @default(uuid())
  personnel_id        String
  log_date            DateTime
  original_time_in    DateTime?
  original_time_out   DateTime?
  requested_time_in   DateTime?
  requested_time_out  DateTime?
  reason              String
  supporting_document String?
  status              ApprovalStatus @default(Pending)
  request_date        DateTime    @default(now())
  approved_by         String
  approval_date       DateTime?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  approved_by_user    User?       @relation(fields: [approved_by], references: [id])
}

model LeaveType {
  id                  String   @id @default(uuid())
  leave_type_name     String
  description         String?
  requires_document   Boolean     @default(false)
  max_days            Int?
  is_active           Boolean     @default(true)
  created_at          DateTime    @default(now())
  leave_balances      LeaveBalance[]
  leave_applications  LeaveApplication[]
  leave_monetization  LeaveMonetization[]
  leave_adjustments   LeaveAdjustment[]
}

model LeaveBalance {
  id                  String   @id @default(uuid())
  personnel_id        String
  leave_type_id       String
  year                String
  total_credits       Float
  used_credits        Float       @default(0.00)
  earned_credits      Float       @default(0.00)
  last_updated        DateTime    @default(now())
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  leave_type          LeaveType   @relation(fields: [leave_type_id], references: [id])
  @@unique([personnel_id, leave_type_id, year])
}

model LeaveAdjustment {
  id                  String   @id @default(uuid())
  personnel_id        String
  leave_type_id       String
  year                String
  adjustment_type     String   // "increase" or "decrease"
  adjustment_amount   Float
  reason              String
  previous_balance    Float
  new_balance         Float
  created_by          String
  created_at          DateTime @default(now())
  personnel           Personnel @relation(fields: [personnel_id], references: [id])
  leave_type          LeaveType @relation(fields: [leave_type_id], references: [id])
  created_by_user     User     @relation("LeaveAdjustmentCreatedBy", fields: [created_by], references: [id])
}

model LeaveApplication {
  id                  String   @id @default(uuid())
  personnel_id        String
  leave_type_id       String
  start_date          DateTime
  end_date            DateTime
  total_days          Float
  status              ApprovalStatus @default(Pending)
  reason              String?
  supporting_document String?
  request_date        DateTime    @default(now())
  approved_by         String?
  approval_date       DateTime?
  approval_comments   String?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  leave_type          LeaveType   @relation(fields: [leave_type_id], references: [id])
  approved_by_user    User?       @relation("LeaveApplicationApprovedBy", fields: [approved_by], references: [id])
}

model LeaveMonetization {
  id                  String   @id @default(uuid())
  personnel_id        String
  leave_type_id       String
  days_to_monetize    Float
  status              ApprovalStatus @default(Pending)
  amount              Float?
  request_date        DateTime    @default(now())
  approved_by         String?
  approval_date       DateTime?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  leave_type          LeaveType   @relation(fields: [leave_type_id], references: [id])
  leave_approved_by_user    User?       @relation(fields: [approved_by], references: [id])
}

model OvertimeRequest {
  id                  String   @id @default(uuid())
  personnel_id        String
  overtime_date       DateTime
  start_time          DateTime
  end_time            DateTime
  total_hours         Float
  reason              String
  status              ApprovalStatus @default(Pending)
  request_date        DateTime    @default(now())
  approved_by         String?
  approval_date       DateTime?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  overtime_approved_by_user    User?       @relation(fields: [approved_by], references: [id])
}

model PersonnelMovement {
  id                  String   @id @default(uuid())
  personnel_id        String
  movement_type       MovementType
  previous_department_id String?
  new_department_id   String?
  previous_designation String?
  new_designation     String?
  previous_salary     Float?
  new_salary          Float?
  previous_item_number String?
  new_item_number     String?
  effective_date      DateTime
  issued_by           String
  issued_date         DateTime
  remarks             String?
  document_path       String?
  created_at          DateTime    @default(now())
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  previous_department Department? @relation("PreviousDepartment", fields: [previous_department_id], references: [id])
  new_department      Department? @relation("NewDepartment", fields: [new_department_id], references: [id])
  issued_by_user      User        @relation(fields: [issued_by], references: [id])
}

model MeritViolation {
  id                  String   @id @default(uuid())
  personnel_id        String
  record_type         RecordType
  description         String
  date_recorded       DateTime
  documented_by       String
  document_path       String?
  created_at          DateTime    @default(now())
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  documented_by_user  User        @relation(fields: [documented_by], references: [id])
}

model AdministrativeCase {
  id                  String   @id @default(uuid())
  personnel_id        String
  case_title          String
  case_description    String
  case_status         CaseStatus  @default(Filed)
  date_filed          DateTime
  resolution          String?
  resolution_date     DateTime?
  sanctions           String?
  filed_by            String
  document_path       String?
  created_at          DateTime    @default(now())
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  filed_by_user       User        @relation(fields: [filed_by], references: [id])
}

model PayrollRecord {
  id                  String   @id @default(uuid())
  personnel_id        String
  payroll_period_start DateTime
  payroll_period_end  DateTime
  basic_salary        Float
  salary_adjustments  Float       @default(0.00)
  gross_salary        Float
  total_deductions    Float
  net_amount_due      Float
  payment_status      PaymentStatus @default(Pending)
  bank_account_number String?
  processed_date      DateTime    @default(now())
  processed_by        String?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  processed_by_user   User?       @relation(fields: [processed_by], references: [id])
  deductions          Deduction[]
}

model Deduction {
  id                  String   @id @default(uuid())
  personnel_id        String
  payroll_id          String
  bir                 Float       @default(0.00)
  pagibig             Float       @default(0.00)
  philhealth          Float       @default(0.00)
  sss                 Float       @default(0.00)
  loans               Float       @default(0.00)
  other_deductions    Float       @default(0.00)
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  payroll_record      PayrollRecord @relation(fields: [payroll_id], references: [id])
}

model LoanRecord {
  id                  String   @id @default(uuid())
  personnel_id        String
  loan_type           LoanType
  loan_source         String
  loan_amount         Float
  monthly_deduction   Float
  start_date          DateTime
  end_date            DateTime?
  remaining_balance   Float
  status              LoanStatus  @default(Active)
  created_at          DateTime    @default(now())
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
}

model JobPosting {
  id                  String   @id @default(uuid())
  position_title      String
  department_id       String
  job_description     String
  qualifications      String
  technical_competencies String?
  salary_range        String?
  employment_type     EmploymentType
  num_vacancies       Int         @default(1)
  application_deadline DateTime
  posting_status      PostingStatus @default(Draft)
  created_by          String
  created_at          DateTime    @default(now())
  department          Department  @relation(fields: [department_id], references: [id])
  created_by_user     User        @relation(fields: [created_by], references: [id])
  job_applications    JobApplication[]
}

model JobApplicant {
  id                  String   @id @default(uuid())
  user_id             String?
  first_name          String
  last_name           String
  middle_name         String?
  email               String
  phone               String
  current_employer    String?
  highest_education   String?
  resume_path         String?
  is_existing_employee Boolean     @default(false)
  application_date    DateTime    @default(now())
  user                User?       @relation(fields: [user_id], references: [id])
  job_applications    JobApplication[]
}

model JobApplication {
  id                  String   @id @default(uuid())
  position_id         String
  applicant_id        String
  cover_letter        String?
  status              ApplicationStatus @default(Pending)
  application_date    DateTime    @default(now())
  withdrawn_date      DateTime?
  remarks             String?
  position            JobPosting  @relation(fields: [position_id], references: [id])
  applicant           JobApplicant @relation(fields: [applicant_id], references: [id])
  application_documents ApplicationDocument[]
  interview_schedules InterviewSchedule[]
  examination_schedules ExaminationSchedule[]
  assessments         ApplicantAssessment[]
}

model ApplicationDocument {
  id                  String   @id @default(uuid())
  application_id      String
  document_type       String
  document_path       String
  upload_date         DateTime    @default(now())
  application         JobApplication @relation(fields: [application_id], references: [id])
}

model InterviewSchedule {
  id                  String   @id @default(uuid())
  application_id      String
  interviewer_id      String
  interview_date      DateTime
  interview_type      InterviewType
  interview_status    InterviewStatus @default(Scheduled)
  interview_location  String?
  interview_notes     String?
  rating              Float?
  application         JobApplication @relation(fields: [application_id], references: [id])
  interviewer         User        @relation(fields: [interviewer_id], references: [id])
}

model ExaminationSchedule {
  id                  String   @id @default(uuid())
  application_id      String
  exam_type           String
  exam_date           DateTime
  exam_location       String?
  exam_status         ExamStatus  @default(Scheduled)
  score               Float?
  passing_score       Float?
  result              ExamResult  @default(Pending)
  examiner_id         String?
  notes               String?
  application         JobApplication @relation(fields: [application_id], references: [id])
  examiner            User?       @relation(fields: [examiner_id], references: [id])
}

model ApplicantAssessment {
  id                  String   @id @default(uuid())
  application_id      String
  assessor_id         String
  assessment_date     DateTime    @default(now())
  criteria_technical  Float?
  criteria_experience Float?
  criteria_education  Float?
  criteria_communication Float?
  criteria_cultural_fit Float?
  overall_rating      Float?
  comments            String?
  recommendation      Recommendation
  application         JobApplication @relation(fields: [application_id], references: [id])
  assessor            User        @relation(fields: [assessor_id], references: [id])
}

model CertificateRequest {
  id                  String   @id @default(uuid())
  personnel_id        String
  certificate_type    CertificateType
  purpose             String
  status              RequestStatus @default(Pending)
  request_date        DateTime    @default(now())
  completion_date     DateTime?
  processed_by        String?
  remarks             String?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  processed_by_user   User?       @relation(fields: [processed_by], references: [id])
}

model PerformanceReview {
  id                  String   @id @default(uuid())
  personnel_id        String
  reviewer_id         String
  review_period_start DateTime
  review_period_end   DateTime
  review_date         DateTime
  performance_score   Float?
  strengths           String?
  areas_for_improvement String?
  goals               String?
  status              ReviewStatus @default(Draft)
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  reviewer            User        @relation(fields: [reviewer_id], references: [id])
}

model TrainingProgram {
  id                  String   @id @default(uuid())
  training_name       String
  description         String?
  start_date          DateTime?
  end_date            DateTime?
  location            String?
  trainer             String?
  max_participants    String?
  status              TrainingStatus @default(Planned)
  created_by          String?
  created_at          DateTime    @default(now())
  training_created_by_user     User?       @relation(fields: [created_by], references: [id])
  training_modules    TrainingModule[]
  training_participants TrainingParticipant[]
}

model TrainingModule {
  id                  String   @id @default(uuid())
  training_id         String
  module_name         String
  content             String?
  video_link          String?
  training_program    TrainingProgram @relation(fields: [training_id], references: [id])
}

model TrainingParticipant {
  training_id         String
  personnel_id        String
  status              ParticipantStatus @default(Enrolled)
  enrollment_date     DateTime    @default(now())
  completion_date     DateTime?
  certificate_issued  Boolean     @default(false)
  feedback            String?
  training_program    TrainingProgram @relation(fields: [training_id], references: [id])
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  @@id([training_id, personnel_id])
}

model EmployeeFeedback {
  id                  String   @id @default(uuid())
  personnel_id        String
  feedback_type       FeedbackType
  feedback_content    String
  is_anonymous        Boolean     @default(false)
  submitted_at        DateTime    @default(now())
  status              FeedbackStatus @default(New)
  response            String?
  responded_by        String?
  responded_at        DateTime?
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  responded_by_user   User?       @relation(fields: [responded_by], references: [id])
}

model Notification {
  id                  String   @id @default(uuid())
  user_id             String
  notification_type   String?
  message             String
  is_read             Boolean     @default(false)
  created_at          DateTime    @default(now())
  user                User        @relation(fields: [user_id], references: [id])
}

model Document {
  id                  String   @id @default(uuid())
  document_name       String
  document_type       String?
  file_path           String
  uploaded_by         String
  upload_date         DateTime    @default(now())
  related_to_table    String?
  related_to_id       String?
  description         String?
  is_public           Boolean     @default(false)
  uploaded_by_user    User        @relation(fields: [uploaded_by], references: [id])
}

model AuditLog {
  id                  String   @id @default(uuid())
  user_id             String
  action_type         String
  table_affected      String
  record_id           String
  action_details      String?
  ip_address          String?
  user_agent          String?
  timestamp           DateTime    @default(now())
  user                User        @relation(fields: [user_id], references: [id])
}

model Report {
  id                  String   @id @default(uuid())
  report_name         String
  generated_by        String
  file_path           String
  digital_signature   String?
  created_at          DateTime    @default(now())
  generated_by_user   User        @relation(fields: [generated_by], references: [id])
}

model Approval {
  id                  String   @id @default(uuid())
  request_type        RequestType
  request_id          String
  approval_step       Int         @default(1)
  status              ApprovalStatus @default(Pending)
  approved_by         String?
  approval_date       DateTime?
  approved_by_user    User?       @relation(fields: [approved_by], references: [id])
}

model SystemSetting {
  id                  String   @id @default(uuid())
  setting_key         String      @unique
  setting_value       String
}

model PerformanceEvaluation {
  id                  String   @id @default(uuid())
  personnel_id        String
  reviewer_id         String
  evaluation_period_start DateTime
  evaluation_period_end DateTime
  evaluation_date     DateTime    @default(now())
  self_assessment     String?
  manager_comments    String?
  peer_feedback       String?
  kpi_score           Float?
  overall_performance_score Float?
  strengths           String?
  areas_for_improvement String?
  recommended_training String?
  status              EvaluationStatus @default(Draft)
  personnel           Personnel   @relation(fields: [personnel_id], references: [id])
  reviewer            User        @relation(fields: [reviewer_id], references: [id])
}

model SystemModule {
  id                  String   @id @default(uuid())
  module_name         String      @unique
  is_active           Boolean     @default(true)
  can_be_disabled     Boolean     @default(true)
  last_updated        DateTime    @default(now())
}

model EmployeeSelfServiceProfile {
  id              String   @id @default(uuid())
  personnelId     String   @unique
  personnel       Personnel @relation(fields: [personnelId], references: [id])
  profilePicture  String?
  bio             String?
  skills          String[]
  certifications  String[]
  education       Education[]
  workExperience  WorkExperience[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Education {
  id              String   @id @default(uuid())
  profileId       String
  profile         EmployeeSelfServiceProfile @relation(fields: [profileId], references: [id])
  institution     String
  degree          String
  fieldOfStudy    String
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean  @default(false)
  description     String?
}

model WorkExperience {
  id              String   @id @default(uuid())
  profileId       String
  profile         EmployeeSelfServiceProfile @relation(fields: [profileId], references: [id])
  company         String
  position        String
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean  @default(false)
  description     String?
}

model EmployeeDocument {
  id              String   @id @default(uuid())
  personnelId     String?
  personnel       Personnel? @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  fileUrl         String
  fileType        String
  fileSize        Int
  category        String
  isPrivate       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Course {
  id            String        @id @default(uuid())
  title         String
  description   String
  objectives    String[]
  prerequisites String[]
  duration      Int
  level         CourseLevel
  status        CourseStatus  @default(Draft)
  instructorId  String
  instructor    Personnel     @relation(fields: [instructorId], references: [id])
  category      String
  tags          String[]
  thumbnailUrl  String?
  modules       CourseModule[]
  enrollments   CourseEnrollment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CourseModule {
  id          String   @id @default(uuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  title       String
  description String
  order       Int
  duration    Int
  content     String
  resources   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CourseEnrollment {
  id              String   @id @default(uuid())
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id])
  personnelId     String
  personnel       Personnel @relation(fields: [personnelId], references: [id])
  enrollmentDate  DateTime @default(now())
  completionDate  DateTime?
  status          String   @default("ENROLLED")
  progress        Int      @default(0)
  lastAccessedAt  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserDocument {
  id              String   @id @default(uuid())
  user_id         String
  title           String
  description     String?
  file_url        String
  file_type       String
  file_size       Int
  category        String
  is_private      Boolean  @default(false)
  uploaded_at     DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
} 